services:  
  title-page:
    build:
      context: title-page
      dockerfile: Dockerfile
    command: npm run build
    volumes:
      - ./title-page:/app/title-page
      - /app/title-page/node_modules
    environment:
      - NODE_ENV=production

  game-page:
    build:
      context: game-page
      dockerfile: Dockerfile
    command: npm run build
    volumes:
      - ./game-page:/app/game-page
      - /app/game-page/node_modules
    environment:
      - NODE_ENV=production

  middleware:
    build:
      context: middleware
    command: [ "--port", ":8080" ]
    ports:
      - "127.0.0.1:2052:8080"
    restart: always
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-games}
      DB_SSL_MODE: disable
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 0.1s
      retries: 100
      start_period: 3s

  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-games}
      PGDATA: /var/lib/postgresql/data/pgdata_games
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./middleware/init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d games" ]
      interval: 10s
      timeout: 1s
      retries: 10

  solver:
    build:
      context: solver
    ports:
      - "127.0.0.1:18080:18080"
    restart: always
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:18080/health" ]
      interval: 30s
      timeout: 0.1s
      retries: 100
      start_period: 1s

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    restart: always
    volumes:
      - ./title-page/dist:/usr/share/nginx/html
      - ./game-page/dist:/usr/share/nginx/html/game
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt/live/superxo.fun/fullchain.pem:/etc/letsencrypt/live/superxo.fun/fullchain.pem
      - /etc/letsencrypt/live/superxo.fun/privkey.pem:/etc/letsencrypt/live/superxo.fun/privkey.pem
    depends_on:
      game-page:
        condition: service_completed_successfully
      title-page:
        condition: service_completed_successfully
      middleware:
        condition: service_healthy
      solver:
        condition: service_healthy

volumes:
  pgdata:
    driver: local
